name: Main Pipeline

on:
  push:
    branches:
      - feature/**
      - hotfix/**
      - main
  pull_request:
    branches:
      - main
      - develop
      - release

jobs:
  commit-check:
    if: github.event_name == 'push' && (contains(github.ref, 'feature/') || contains(github.ref, 'hotfix/'))
    uses: ./.github/workflows/verify-commit.yml
    secrets: inherit

  lint:
    needs: [commit-check]
    if: |
      always() && 
      (needs.commit-check.result == 'success' || needs.commit-check.result == 'skipped') &&
      (
        (github.event_name == 'push' && (contains(github.ref, 'feature/') || contains(github.ref, 'hotfix/'))) ||
        (github.event_name == 'pull_request' && (
          (contains(github.base_ref, 'develop') && (contains(github.head_ref, 'feature/') || contains(github.head_ref, 'hotfix/'))) ||
          (contains(github.base_ref, 'release') && contains(github.head_ref, 'develop')) ||
          (contains(github.base_ref, 'main') && contains(github.head_ref, 'release'))
        ))
      )
    uses: ./.github/workflows/verify-lint.yml
    secrets: inherit

  unit-tests:
    needs: [lint]
    if: |
      always() && 
      needs.lint.result == 'success' &&
      (
        (github.event_name == 'push' && (contains(github.ref, 'feature/') || contains(github.ref, 'hotfix/'))) ||
        (github.event_name == 'pull_request' && (
          (contains(github.base_ref, 'release') && contains(github.head_ref, 'develop')) ||
          (contains(github.base_ref, 'main') && contains(github.head_ref, 'release'))
        ))
      )
    uses: ./.github/workflows/execute-unit-tests.yml
    secrets: inherit

  integration-tests:
    needs: [lint, unit-tests]
    if: |
      always() && 
      needs.lint.result == 'success' && 
      (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'skipped') &&
      (
        (github.event_name == 'pull_request' && (
          (contains(github.base_ref, 'develop') && (contains(github.head_ref, 'feature/') || contains(github.head_ref, 'hotfix/'))) ||
          (contains(github.base_ref, 'release') && contains(github.head_ref, 'develop')) ||
          (contains(github.base_ref, 'main') && contains(github.head_ref, 'release'))
        ))
      )
    uses: ./.github/workflows/execute-integration-tests.yml
    secrets: inherit

  deploy:
    needs: [lint, unit-tests, integration-tests]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
      (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'skipped') &&
      (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          # Buscar a tag mais recente e incrementar
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            # Se não houver tags, começar com v1.0
            NEW_TAG="v1.0"
          else
            # Incrementar o número menor da versão
            MAJOR_VERSION=$(echo $LATEST_TAG | cut -d '.' -f 1)
            MINOR_VERSION=$(echo $LATEST_TAG | cut -d '.' -f 2)
            NEW_MINOR=$((MINOR_VERSION + 1))
            NEW_TAG="${MAJOR_VERSION}.${NEW_MINOR}"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Nova tag a ser criada: $NEW_TAG"

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}
          echo "Tag ${{ env.NEW_TAG }} criada e enviada com sucesso!"

      - name: Deploy application
        uses: ./.github/workflows/deploy.yml